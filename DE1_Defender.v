
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_Defender(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
parameter 			spaceship_size = 20;
parameter 			bullet_length = 7;
parameter 			bullet_width = 5;
parameter 			alien_length = 15;
parameter 			alien_width = 15;
parameter 			Bullet_Size = 30;
parameter 			Alien_Height = 30;
parameter 			MAX_BULLETS = 4;

wire 					CLOCK_25;
wire		[9:0]		p_x_spaceship;
wire		[9:0]		p_y_spaceship;
wire					fire_trigger;

wire [9:0] o_bullet_x;
wire [9:0] o_bullet_y;
wire bullet_active; 
wire bullet_active_detect;
wire bullet_en;

wire [9:0] o_alien_x;
wire [9:0] o_alien_y;
wire alien_active;
wire alien_active_detect;
wire alien_en;
wire [3:0] hit_alien1;

wire [9:0] o_alien2_x;
wire [9:0] o_alien2_y;
wire alien2_active;
wire alien2_active_detect;
wire alien2_en;
wire [3:0] hit_alien2;

wire [9:0] o_alien3_x;
wire [9:0] o_alien3_y;
wire alien3_active;
wire alien3_active_detect;
wire alien3_en;
wire [3:0] hit_alien3;

wire [2:0] lives;
wire [15:0] scores;

wire [9:0] 	h_count, v_count;
wire 			vga_blank_n;

// Corrected connections for VGA signals
assign 		VGA_CLK 			= 		CLOCK_25;
assign 		VGA_BLANK_N 	= 		vga_blank_n;

// Alien 1 hit detection
assign hit_alien1 = ((((o_bullet_x + Bullet_Size) == o_alien_x) && 
                     ((o_bullet_y + Bullet_Size) >= o_alien_y) && 
                     ((o_bullet_y - Bullet_Size) <= (o_alien_y + Alien_Height))) && 
                     bullet_active && alien_active) ? 1'b1 : 1'b0;

// Alien 2 hit detection
assign hit_alien2 = ((((o_bullet_x + Bullet_Size) == o_alien2_x) && 
                     ((o_bullet_y + Bullet_Size) >= o_alien2_y) && 
                     ((o_bullet_y - Bullet_Size) <= (o_alien2_y + Alien_Height))) && 
                     bullet_active && alien2_active) ? 1'b1 : 1'b0;

// Alien 3 hit detection
assign hit_alien3 = ((((o_bullet_x + Bullet_Size) == o_alien3_x) && 
                     ((o_bullet_y + Bullet_Size) >= o_alien3_y) && 
                     ((o_bullet_y - Bullet_Size) <= (o_alien3_y + Alien_Height))) && 
                     bullet_active && alien3_active) ? 1'b1 : 1'b0;


assign hit_ship = ((((p_x_spaceship + Bullet_Size) == o_alien_x) && 
								((p_y_spaceship + Bullet_Size) >= o_alien_y) && 
								((p_y_spaceship - Bullet_Size) <= (o_alien_y + Alien_Height))) && 
								alien_active) ? 1'b1 : 1'b0;
								
assign hit_ship2 = ((((p_x_spaceship + Bullet_Size) == o_alien2_x) && 
								((p_y_spaceship + Bullet_Size) >= o_alien2_y) && 
								((p_y_spaceship - Bullet_Size) <= (o_alien2_y + Alien_Height))) && 
								alien_active) ? 1'b1 : 1'b0;
				
assign hit_ship3 = ((((p_x_spaceship + Bullet_Size) == o_alien3_x) && 
								((p_y_spaceship + Bullet_Size) >= o_alien3_y) && 
								((p_y_spaceship - Bullet_Size) <= (o_alien3_y + Alien_Height))) && 
								alien_active) ? 1'b1 : 1'b0;				
//=======================================================
//  Structural coding
//=======================================================

clock_divider clock_inst (
	.clk_50MHz(CLOCK_50),
	.clk_25MHz(CLOCK_25)
);

lives_display lives_display_inst(
    .input_value(lives),
    .output_value(LEDR[7:0])
);

score_display score_display_inst(
		.score(scores),
		.seg0(HEX0),
		.seg1(HEX1),
		.seg2(HEX2),
		.seg3(HEX3),
);

ship_controller ship_controller_inst (
	.clk(CLOCK_25),
	.reset(SW[9]),
	.sw_move(~KEY[1:0]),
	.sw_fire(~KEY[2]),
	.hit_detected(hit_ship || hit_ship2 || hit_ship3),
	.o_ship_x(p_x_spaceship),
	.o_ship_y(p_y_spaceship),
	.fire(fire_trigger),
	.lives(lives)
);

bullet_controller bullet_controller_inst (
    .clk(CLOCK_25),
    .reset(SW[9]),
    .fire(fire_trigger),
    .ship_x(p_x_spaceship),
    .ship_y(p_y_spaceship),
	 .hit_detected(hit_alien1 | hit_alien2 | hit_alien3),
    .o_bullet_x(o_bullet_x),
    .o_bullet_y(o_bullet_y),
    .bullet_active(bullet_active),
	 .scores(scores)
);

alien_controller#(
	 .START_X(673),
	 .START_Y_MIN(65),
	 .START_Y_MAX(205)
) alien_controller_inst(
    .clk(CLOCK_25),
    .reset(SW[9]),
    .o_alien_x(o_alien_x),
    .o_alien_y(o_alien_y),
    .alien_active(alien_active),
	 .hit_detected(|hit_alien1)
);

alien_controller#(
	 .START_X(673),
	 .START_Y_MIN(205),
	 .START_Y_MAX(345)
) alien2_controller_inst(
    .clk(CLOCK_25),
    .reset(SW[9]),
    .o_alien_x(o_alien2_x),
    .o_alien_y(o_alien2_y),
    .alien_active(alien2_active),
	 .hit_detected(|hit_alien2)
);

alien_controller#(
	 .START_X(673),
	 .START_Y_MIN(345),
	 .START_Y_MAX(485)
) alien3_controller_inst(
    .clk(CLOCK_25),
    .reset(SW[9]),
    .o_alien_x(o_alien3_x),
    .o_alien_y(o_alien3_y),
    .alien_active(alien3_active),
	 .hit_detected(|hit_alien3)
);

control_unit control_unit_inst (
        .clk(clk),
        .reset(reset),
        .lives(lives),
        .LED(LEDR[9])
    );
	 
// Instantiate VGA Controller
 vga_controller vga (
	.CLK(CLOCK_25),
	.H_COUNT(h_count),
	.V_COUNT(v_count),
	.VGA_HS(VGA_HS),
	.VGA_VS(VGA_VS),
	.VGA_BLANK_N(vga_blank_n),
	.VGA_SYNC_N(VGA_SYNC_N)
 );

// Calculate the boundaries of the spaceship
wire [9:0] spaceship_left = p_x_spaceship - spaceship_size/2;
wire [9:0] spaceship_right = p_x_spaceship + spaceship_size/2;
wire [9:0] spaceship_top = p_y_spaceship - spaceship_size/2;
wire [9:0] spaceship_bottom = p_y_spaceship + spaceship_size/2;

// Determine if the current pixel is inside the spaceship
wire inside_spaceship = (h_count >= spaceship_left) & (h_count <= spaceship_right) &
                        (v_count >= spaceship_top) & (v_count <= spaceship_bottom);

assign square_en = (h_count >= 153 && h_count < 774 && v_count >= 65 && v_count < 485) ? 1'b1 : 1'b0;


assign alien_en = (alien_active) &&
							(h_count >= (o_alien_x - alien_width)) &&
							(h_count <= (o_alien_x + alien_width)) &&
							(v_count >= (o_alien_y - alien_length)) &&
							(v_count <= (o_alien_y + alien_length));

assign alien2_en = (alien2_active) &&
							(h_count >= (o_alien2_x - alien_width)) &&
							(h_count <= (o_alien2_x + alien_width)) &&
							(v_count >= (o_alien2_y - alien_length)) &&
							(v_count <= (o_alien2_y + alien_length));
							
assign alien3_en = (alien3_active) &&
							(h_count >= (o_alien3_x - alien_width)) &&
							(h_count <= (o_alien3_x + alien_width)) &&
							(v_count >= (o_alien3_y - alien_length)) &&
							(v_count <= (o_alien3_y + alien_length));
								
reg [3:0] bullet_en_arr; // Declare an array to hold each bullet_en value

// Check for bullet
assign bullet_en = (bullet_active &&
                    (h_count >= (o_bullet_x - bullet_width)) &&
                    (h_count <= (o_bullet_x + bullet_width)) &&
                    (v_count >= (o_bullet_y - bullet_length)) &&
                    (v_count <= (o_bullet_y + bullet_length))) ? 1'b1 : 1'b0;
					
			
// Draw a square in the middle of the screen
assign VGA_R = (vga_blank_n == 1'b1 && (0 || inside_spaceship || bullet_en)) ? 8'hFF : 8'h00;
assign VGA_G = (vga_blank_n == 1'b1 && (0 || inside_spaceship || alien_en || alien2_en || alien3_en)) ? 8'hFF : 8'h00;
assign VGA_B = (vga_blank_n == 1'b1 && (0 || inside_spaceship)) ? 8'hFF : 8'h00;

endmodule
